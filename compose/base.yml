volumes:
  postgres:
  redis:
  minio:

services:
  varnish:
    build: ../docker/varnish
    user: root # https://github.com/varnish/docker-varnish/issues/53

    environment:
      VARNISH_HTTP_PORT: 8080

    ports:
      - ${VARNISH_PORT:?}:8080

    tmpfs:
      - /var/lib/varnish/varnishd:exec

    depends_on:
      rails:
        condition: service_started
      minio-setup:
        condition: service_completed_successfully

  rails: &rails
    build:
      context: ..

      args:
        APP_GID:
        APP_UID:
        MASS_DIR_PATH_TEMPLATE:
        NODE_VERSION:
        OPENID_CLIENT_ID:
        OPENID_CONFIGURATION_ENDPOINT:
        RUBY_VERSION:

    init: true

    environment:
      CURATOR_ML_ADDRESS:          '"DDBJ Mass Submission System (MSS)" <mass@ddbj.nig.ac.jp>'
      DATABASE_URL:                postgresql://postgres@postgres/mssform
      EXCEPTION_RECIPIENTS:
      EXTRACTION_WORKDIR:          /app/work/extraction
      FORCE_SSL:
      GOOGLE_ACCOUNT_TYPE:         service_account
      GOOGLE_CLIENT_EMAIL:
      GOOGLE_CLIENT_ID:
      GOOGLE_PRIVATE_KEY:
      IRB_USE_AUTOCOMPLETE:        'false'
      MAIL_ALLOWED_DOMAINS:
      MASS_DIR_PATH_TEMPLATE:
      MEMCACHE_SERVERS:            memcached
      MINIO_ACCESS_KEY_ID:
      MINIO_BUCKET:                uploads
      MINIO_ENDPOINT:
      MINIO_SECRET_ACCESS_KEY:
      MSSFORM_URL:
      MSS_WORKING_LIST_SHEET_ID:
      MSS_WORKING_LIST_SHEET_NAME:
      OPENID_CLIENT_ID:
      REDIS_URL:                   redis://redis
      SECRET_KEY_BASE:
      SMTP_ADDRESS:
      SMTP_AUTHENTICATION:
      SMTP_DOMAIN:
      SMTP_PASSWORD:
      SMTP_PORT:
      SMTP_USERNAME:
      STAGE:
      SUBMISSIONS_DIR:             /app/submissions

    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      memcached:
        condition: service_started
      minio-setup:
        condition: service_completed_successfully

  sidekiq:
    <<: *rails
    command: [bundle, exec, sidekiq]

  postgres:
    image: postgres:14

    environment:
      POSTGRES_DB:               mssform
      POSTGRES_HOST_AUTH_METHOD: trust

    volumes:
      - postgres:/var/lib/postgresql/data

    healthcheck:
      test: [CMD, pg_isready, --username, postgres]
      interval: 1s
      timeout: 3s
      retries: 30

  redis:
    image: redis:7
    command: [--appendonly, 'yes']

    volumes:
      - redis:/data

    healthcheck:
      test: [CMD, redis-cli, ping]
      interval: 1s
      timeout: 3s
      retries: 30

  memcached:
    image: memcached:latest

  minio:
    image: minio/minio:RELEASE.2023-12-07T04-16-00Z
    command: [server, /data, --console-address, ':9001']

    environment:
      MINIO_ROOT_PASSWORD:
      MINIO_ROOT_USER:

    volumes:
      - minio:/data

    healthcheck:
      test: [CMD, mc, ready, local]
      interval: 1s
      timeout: 3s
      retries: 30

  minio-setup:
    image: minio/mc:RELEASE.2023-02-28T00-12-59Z # https://min.io/docs/minio/linux/reference/minio-mc-admin/mc-admin-policy.html

    entrypoint:
      - bash
      - -xc
      - |
          set -e

          mc alias set minio http://minio:9000 $${MINIO_ROOT_USER:?} $${MINIO_ROOT_PASSWORD:?}
          mc mb --ignore-existing minio/uploads
          mc admin user add minio $${MINIO_ACCESS_KEY_ID:?} $${MINIO_SECRET_ACCESS_KEY:?}
          mc admin policy set minio readwrite user=$${MINIO_ACCESS_KEY_ID:?}

    environment:
      MINIO_ACCESS_KEY_ID:
      MINIO_ROOT_PASSWORD:
      MINIO_ROOT_USER:
      MINIO_SECRET_ACCESS_KEY:

    depends_on:
      minio:
        condition: service_healthy
